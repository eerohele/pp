(require '[cognitect.transcriptor :as xr])

(require '[clojure.pprint :as cpp])
(require '[clojure.spec.alpha :as spec])
(require '[clojure.test.check :refer [quick-check]])
(require '[clojure.test.check.generators :as gen])
(require '[clojure.test.check.properties :refer [for-all]])

(require '[me.flowthing.pp :as pp])

(spec/def ::pass? true?)
(spec/def ::ret (spec/keys :req-un [::pass?]))

(set! *print-length* nil)
(set! *print-level* nil)

;; Prints readably
(quick-check 10000
  (for-all [x gen/any-printable-equatable
            print-dup gen/boolean]
    (= x
      (read-string
        (with-out-str
          (binding [*print-dup* print-dup] (pp/pprint x)))))))

(xr/check! ::ret)

;; With infinite max width, prints everything the same way as prn.
(quick-check 10000
  (for-all [x gen/any-printable-equatable]
    (=
      (with-out-str (pp/pprint x {:max-width ##Inf}))
      (with-out-str (prn x)))))

(xr/check! ::ret)

;; TODO: Generative test that checks that nothing gets printed past
;; :max-width except strings? Not sure how easy it is to check whether
;; the thing past max-width is within a string, though.

(quick-check 1000
  (for-all [print-level gen/nat
            print-length gen/nat
            x (gen/vector gen/int)]
    (binding [*print-level* print-level
              *print-length* print-length]
      (= (with-out-str (pp/pprint x)) (with-out-str (cpp/pprint x))))))

(xr/check! ::ret)

;; Prints basic maps the same way as clojure.pprint/pprint.
(quick-check 1000
  (for-all [print-length gen/nat
            print-level gen/nat
            x (gen/map gen/keyword gen/int)]
    (binding [*print-level* print-level
              *print-length* print-length]
      (= (with-out-str (pp/pprint x)) (with-out-str (cpp/pprint x))))))

(xr/check! ::ret)

(quick-check 1000
  (for-all [print-length gen/nat
            print-level gen/nat
            print-namespace-maps gen/boolean
            x (gen/map gen/keyword-ns gen/int)]
    (binding [*print-level* print-level
              *print-length* print-length
              *print-namespace-maps* print-namespace-maps]
      (= (with-out-str (pp/pprint x)) (with-out-str (cpp/pprint x))))))

(xr/check! ::ret)

(quick-check 75
  (for-all [print-namespace-maps gen/boolean
            x (gen/map (gen/one-of [gen/keyword-ns gen/symbol-ns])
                gen/any-printable-equatable)]
    (binding [*print-namespace-maps* print-namespace-maps]
      (=
        (with-out-str
          (pp/pprint x {:max-width ##Inf}))
        (with-out-str
          (binding [cpp/*print-right-margin* ##Inf]
            (cpp/pprint x)))))))

(xr/check! ::ret)

;; A generative test that checks that pp/print and cpp/print print any
;; gen/any-printable-equatable the same way would be great, but
;; cpp/print sometimes prints things in miser mode even when there's
;; enough space to use linear mode, and I don't want to have my impl do
;; that.
;;
;; With infinite max width, however, me.flowthing.pp prints everything
;; the same way as clojure.pprint.
(quick-check 1000
  (for-all [x gen/any-printable-equatable]
    (binding [cpp/*print-right-margin* ##Inf]
      (=
        (with-out-str (pp/pprint x {:max-width ##Inf}))
        (with-out-str (cpp/pprint x))))))

(xr/check! ::ret)

;; *print-readably*
(quick-check 1000
  (for-all [x (gen/one-of [gen/string (gen/vector gen/char)])
            print-readably gen/boolean]
    (binding [*print-readably* print-readably]
      (=
        (with-out-str (pp/pprint x))
        (with-out-str (cpp/pprint x))))))

(xr/check! ::ret)

(require '[clojure.repl :as repl])

(def clojure-core-sources
  (eduction
    (map val)
    (map symbol)
    (keep
      (fn [sym]
        (try
          (repl/source-fn sym)
          (catch RuntimeException _))))
    (map (fn [s]
           (binding [*ns* (find-ns 'clojure.core)]
             (read-string {:read-cond :preserve} s))))
    (ns-interns 'clojure.core)))

(def differences
  (remove
    #(= (with-out-str (cpp/pprint %)) (with-out-str (pp/pprint %)))
    clojure-core-sources))

(count differences)

;; There are at most 25 differences between how clojure.pprint and SUT
;; print clojure.core sources.
;;
;; Haven't gone through all of them yet, but the many of them seem to be
;; cases where clojure.pprint exceeds *print-right-margin* even though
;; it doesn't have to.
(xr/check! (partial >= 25))

(comment
  ;; Spit a command to diff clojure.pprint and me.flowthing.pp output
  (do
    (require '[clojure.java.io :as io])

    (let [tmpdir (io/file (System/getProperty "java.io.tmpdir") "pp")
          cpp-file (io/file tmpdir "cpp.clj")
          pp-file (io/file tmpdir "pp.clj")]

      (.mkdirs tmpdir)

      (when (.exists cpp-file) (.delete cpp-file))
      (when (.exists pp-file) (.delete pp-file))

      (run!
        (fn [source]
          (let [cpp-source (with-out-str (cpp/pprint source))
                pp-source (with-out-str (pp/pprint source))]
            (when (not= cpp-source pp-source)
              (spit cpp-file cpp-source :append true)
              (spit pp-file pp-source :append true))))
        clojure-core-sources)

      (printf "diff -u %s %s | diff-so-fancy\n" cpp-file pp-file)))
  ,,,)
